@page "/Positions/Create"
@using Blazor_CRUD.Shared.DTO;
@using Blazor_CRUD.Shared.Models;
@using Blazored.Toast.Services;
@using System.Net.Http.Json;
@inject HttpClient http
@inject IToastService toastService

<div class="row">
    <div class="col-12">
        <EditForm Model="@position" OnValidSubmit="SaveOrder">
            <h3>Create Customer</h3>
            <DataAnnotationsValidator />
            
            <div class="form-group row mb-1">
                <label class="col-form-label col-2 text-end" for="@position.PositionName">Position Name</label>
                <div class="col-7">
                    <InputText @bind-Value="@position.PositionName" class="form-control" />
                    <ValidationMessage For="@(()=>position.PositionName)" class="text-danger" />
                </div>
            </div>        
            <div class="form-group row mb-1">
               
                <div class="col-9">
                    <div class="d-flex justify-content-between" >
                       <h4>Items</h4> <button @onclick="@AddItem" type="button" class="btn btn-primary btn-sm m-1"><i class="bi bi-plus"></i></button>
                    </div>
                </div>
            </div>
            @foreach (var oi in position.PositionItemDTOs)
            {
                int i = 0;
                <div class="form-group row mb-1">
                    @*<label class="col-form-label col-1 text-end" for="@travelagent.CustomerID">Product</label>*@
                    <div class="col-3">
                        <InputSelect @bind-Value="oi.EmployeeId" class="form-select">
                            <option value="">Select</option>
                            @if (employees is not null)
                            {
                                foreach (var p in employees)
                                {
                                    <option value="@p.EmployeeId">@p.EmployeeName</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=>oi.EmployeeId)" class="text-danger" />
                    </div>
                   
                    <div class="col-1">
                        <button @onclick="@(()=>RemoveItem(i++))" type="button" class="btn btn-secondary btn-sm">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            }
            <div class="form-group row mb-1">

                <div class="col-9">
                   <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary">Save Position</button>
                   </div>
                </div>
                <div class="col-12">
                    <a href="/Companys/List" class="btn btn-link">Back to list</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private PositionDTO position = new();
    private Employee[]? employees;
    protected override async Task OnInitializedAsync()
    {
        position.PositionItemDTOs.Add(new PositionItemDTO());
        employees = await http.GetFromJsonAsync<Employee[]>("api/Employees");
    }
    private void AddItem()
    {
        position.PositionItemDTOs.Add(new PositionItemDTO());
    }
    private void RemoveItem(int index)
    {
        if (position.PositionItemDTOs.Count > 1)
            ((List<PositionItemDTO>)position.PositionItemDTOs).RemoveAt(index);
    }
    private async Task SaveOrder()
    {
        var response = await http.PostAsJsonAsync("api/Positions/DTO", position);
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Data saved successfully", "Success");
            position = new();
            position.PositionItemDTOs.Add(new PositionItemDTO());
        }
        else
        {
            toastService.ShowError("Failed to data.", "Error");
        }
        await Task.CompletedTask;
    }
}

